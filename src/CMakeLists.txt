INCLUDE(CheckIncludeFile)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)

ADD_DEFINITIONS(-DHAVE_CONFIG_H -DHAVE_VERSION_H)

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wno-unused-variable")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(MSVC)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
  SET(CMAKE_C_FLAGS "${MY_C_FLAGS} /wd4100 /wd4101 /wd4189 /wd4706")
  STRING(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
  STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
  
  # Use the highest warning level for visual studio.
  SET(CMAKE_C_WARNING_LEVEL 4)
  IF(CMAKE_C_FLAGS MATCHES "/W[0-4]")
    STRING(REGEX REPLACE "/W[0-4]" "/W4"
           CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
  ELSE(CMAKE_C_FLAGS MATCHES "/W[0-4]")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4")
  ENDIF(CMAKE_C_FLAGS MATCHES "/W[0-4]")
ENDIF(MSVC)

IF(UNIX)
  SET(CMAKE_REQUIRED_LIBRARIES m)
ENDIF(UNIX)

IF(WIN32)
  SET(RES_SRCS ${RES_SRCS} spagedi.rc)
ENDIF(WIN32)

IF(APPLE_BUNDLE_APP)
  SET(SPAGEDI_MACOSX_BUNDLE MACOSX_BUNDLE)
ENDIF(APPLE_BUNDLE_APP)

CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)
CHECK_INCLUDE_FILE("libgen.h" HAVE_LIBGEN_H)
CHECK_FUNCTION_EXISTS("strlcpy" HAVE_STRLCPY)
CHECK_FUNCTION_EXISTS("strlcat" HAVE_STRLCAT)
CHECK_FUNCTION_EXISTS("basename" HAVE_BASENAME)
CHECK_FUNCTION_EXISTS("dirname" HAVE_DIRNAME)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")

ADD_EXECUTABLE(spagedi ${SPAGEDI_MACOSX_BUNDLE}
  main.c Autoccomp.c Autoccomp.h Xatools.c Xatools.h Autocio.c Autocio.h
  compat.c compat.h
  ${CMAKE_CURRENT_BINARY_DIR}/config.h
  ${RES_SRCS})

TARGET_LINK_LIBRARIES(spagedi ${CMAKE_REQUIRED_LIBRARIES})

ADD_CUSTOM_TARGET(version
    ${CMAKE_COMMAND} -D SRC=${CMAKE_CURRENT_SOURCE_DIR}/version.h.in
                     -D DST=${CMAKE_CURRENT_BINARY_DIR}/version.h
                     -D GIT_EXECUTABLE=${GIT_EXECUTABLE}
                     -P ${CMAKE_SOURCE_DIR}/version.cmake
)

ADD_DEPENDENCIES(spagedi version)
ADD_DEPENDENCIES(new_package_source version)

IF(APPLE_BUNDLE_APP)
  SET_TARGET_PROPERTIES(spagedi PROPERTIES OUTPUT_NAME ${SPAGEDI_BUNDLE_NAME})
  SET(SPAGEDI_INSTALL_EXTRA_ARGS BUNDLE DESTINATION "${SPAGEDI_BUNDLE_LOCATION}")
ENDIF(APPLE_BUNDLE_APP)

INSTALL(TARGETS spagedi RUNTIME DESTINATION bin ${SPAGEDI_INSTALL_EXTRA_ARGS})

IF(UNIX)
  INSTALL(FILES SPAGeDi.desktop DESTINATION share/applications )
  INSTALL(FILES SPAGeDi.png DESTINATION share/pixmaps )
ENDIF(UNIX)

IF(APPLE_BUNDLE_APP)
  INSTALL(CODE "file(MAKE_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin)")
  INSTALL(CODE "execute_process(COMMAND ln -s \"../MacOS/${SPAGEDI_BUNDLE_NAME}\" spagedi
                  WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin)")
#  INSTALL(CODE "set(input_file
#    \"\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/MacOS/${SPAGEDI_BUNDLE_NAME}\")")
#  INSTALL(SCRIPT "${CMAKE_SOURCE_DIR}/CMakeIngestOSXBundleLibraries.cmake") 
ENDIF(APPLE_BUNDLE_APP)

